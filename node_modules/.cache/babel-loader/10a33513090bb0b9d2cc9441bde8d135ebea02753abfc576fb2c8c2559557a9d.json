{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ahmed\\\\Desktop\\\\Backend task\\\\inotebook\\\\src\\\\Context\\\\notes\\\\NoteState.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport noteContext from \"./noteContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NoteState = props => {\n  _s();\n  const host = \"http://localhost:5000\";\n  const notesinitial = [];\n\n  //fetchallnotes\n  const getallNotes = async () => {\n    //api call\n    const responce = await fetch(`${host}/api/notes/fetchallnotes`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'auth-token': localStorage.getItem(\"token\")\n      }\n    });\n    const json = await responce.json();\n    if (!response.ok) {\n      console.error(\"Failed to fetch notes:\", json);\n      return;\n    }\n    setnotes(json); // only if successful\n  };\n\n  //addnote\n  const addNote = async (title, description, tag) => {\n    //api call\n    const responce = await fetch(`${host}/api/notes/addnote`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'auth-token': localStorage.getItem('token')\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      })\n    });\n    const note = await responce.json();\n    setnotes(notes.concat(note));\n  };\n\n  //deleteNote\n  const deleteNote = async id => {\n    //api call\n    const responce = await fetch(`${host}/api/notes/deletenote/${id}`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n        'auth-token': localStorage.getItem('token')\n      }\n    });\n    const json = await responce.json();\n    console.log(json);\n    const newNote = notes.filter(note => {\n      return note._id !== id;\n    });\n    setnotes(newNote);\n  };\n\n  //editNote\n  const editNote = async (id, title, description, tag) => {\n    //api call\n    const responce = await fetch(`${host}/api/notes/updatenote/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        'auth-token': localStorage.getItem('token')\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      })\n    });\n    const json = await responce.json();\n    console.log(json);\n\n    //Logic to edit in client\n    let newNotes = JSON.parse(JSON.stringify(notes));\n    for (let index = 0; index < newNotes.length; index++) {\n      const element = newNotes[index];\n      if (element._id === id) {\n        newNotes[index].title = title;\n        newNotes[index].description = description;\n        newNotes[index].tag = tag;\n        break;\n      }\n    }\n    setnotes(newNotes);\n  };\n  const [notes, setnotes] = useState(notesinitial);\n  return /*#__PURE__*/_jsxDEV(noteContext.Provider, {\n    value: {\n      notes,\n      addNote,\n      deleteNote,\n      editNote,\n      getallNotes\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n};\n_s(NoteState, \"AoVBfJhv+WZzotSMTTreJsweXo4=\");\n_c = NoteState;\nexport default NoteState;\nvar _c;\n$RefreshReg$(_c, \"NoteState\");","map":{"version":3,"names":["useState","noteContext","jsxDEV","_jsxDEV","NoteState","props","_s","host","notesinitial","getallNotes","responce","fetch","method","headers","localStorage","getItem","json","response","ok","console","error","setnotes","addNote","title","description","tag","body","JSON","stringify","note","notes","concat","deleteNote","id","log","newNote","filter","_id","editNote","newNotes","parse","index","length","element","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Ahmed/Desktop/Backend task/inotebook/src/Context/notes/NoteState.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport noteContext from \"./noteContext\";\r\n\r\n\r\nconst NoteState = (props) => {\r\n  const host = \"http://localhost:5000\";\r\n  \r\n  const notesinitial =[]\r\n    \r\n   //fetchallnotes\r\n  const getallNotes = async () => {\r\n\r\n    //api call\r\n  const responce = await fetch(`${host}/api/notes/fetchallnotes`, {\r\n    method : 'GET',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'auth-token': localStorage.getItem(\"token\")\r\n    }\r\n  });\r\n  const json = await responce.json();\r\n  if (!response.ok) {\r\n  console.error(\"Failed to fetch notes:\", json);\r\n  return;\r\n}\r\nsetnotes(json); // only if successful\r\n\r\n   \r\n\r\n  }\r\n\r\n  //addnote\r\n  const addNote = async (title, description, tag) => {\r\n\r\n    //api call\r\n  const responce = await fetch(`${host}/api/notes/addnote`, {\r\n    method : 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'auth-token': localStorage.getItem('token')\r\n    },\r\n    body: JSON.stringify({title, description, tag})\r\n  });\r\n  const note = await responce.json();\r\n  setnotes(notes.concat(note));\r\n  }\r\n\r\n  //deleteNote\r\n  const deleteNote = async (id) => {\r\n    //api call\r\n  const responce = await fetch(`${host}/api/notes/deletenote/${id}`, {\r\n    method : 'DELETE',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'auth-token': localStorage.getItem('token')\r\n    }\r\n  });\r\n   const json = await responce.json();\r\n   console.log(json);\r\n\r\n    \r\n    const newNote = notes.filter((note) => { return note._id !== id })\r\n    setnotes(newNote)\r\n  }\r\n\r\n\r\n  //editNote\r\n  const editNote = async(id, title, description, tag) => {\r\n  //api call\r\n  const responce = await fetch(`${host}/api/notes/updatenote/${id}`, {\r\n    method : 'PUT',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'auth-token': localStorage.getItem('token')\r\n    },\r\n    body: JSON.stringify({title, description, tag})\r\n  });\r\n  const json = await responce.json();\r\n  console.log(json)\r\n  \r\n  //Logic to edit in client\r\n   let newNotes = JSON.parse(JSON.stringify(notes))\r\n  for (let index = 0; index < newNotes.length; index++) {\r\n    const element = newNotes[index];\r\n    if (element._id === id) {\r\n      newNotes[index].title = title;\r\n      newNotes[index].description = description;\r\n      newNotes[index].tag = tag;\r\n    break;\r\n    }\r\n  }\r\n  \r\n  setnotes(newNotes);\r\n  \r\n  }\r\n\r\n  \r\n  \r\n  const [notes, setnotes] = useState(notesinitial)\r\n  return (\r\n    <noteContext.Provider value={{ notes, addNote, deleteNote, editNote, getallNotes }}>\r\n      {props.children}\r\n    </noteContext.Provider>\r\n  )\r\n}\r\n\r\nexport default NoteState;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}