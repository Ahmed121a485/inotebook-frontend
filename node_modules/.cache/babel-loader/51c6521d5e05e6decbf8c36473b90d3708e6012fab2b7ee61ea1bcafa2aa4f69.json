{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ahmed\\\\Desktop\\\\Backend task\\\\inotebook\\\\src\\\\Context\\\\notes\\\\NoteState.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport noteContext from \"./noteContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NoteState = props => {\n  _s();\n  const host = \"http://localhost:5000\";\n  const notesinitial = [];\n  const [notes, setnotes] = useState(notesinitial);\n\n  // Fetch all notes\n  const getallNotes = async () => {\n    try {\n      const response = await fetch(`${host}/api/notes/fetchallnotes`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'auth-token': '<your-valid-token>'\n        }\n      });\n      const json = await response.json();\n      setnotes(json); // optional, if your backend returns the array\n      console.log(json);\n    } catch (error) {\n      console.error(\"Error fetching notes:\", error);\n    }\n  };\n\n  // Add note\n  const addNote = async (title, description, tag) => {\n    try {\n      const response = await fetch(`${host}/api/notes/addnote`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'auth-token': '<your-valid-token>'\n        },\n        body: JSON.stringify({\n          title,\n          description,\n          tag\n        })\n      });\n      const json = await response.json();\n      setnotes(notes.concat(json)); // use response from backend\n    } catch (error) {\n      console.error(\"Error adding note:\", error);\n    }\n  };\n\n  // Delete note\n  const deleteNote = async id => {\n    try {\n      const response = await fetch(`${host}/api/notes/deletenote/${id}`, {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json',\n          'auth-token': '<your-valid-token>'\n        }\n      });\n      const json = await response.json();\n      console.log(json);\n      const newNotes = notes.filter(note => note._id !== id);\n      setnotes(newNotes);\n    } catch (error) {\n      console.error(\"Error deleting note:\", error);\n    }\n  };\n\n  // Edit note\n  const editNote = async (id, title, description, tag) => {\n    try {\n      const response = await fetch(`${host}/api/notes/updatenote/${id}`, {\n        method: 'PUT',\n        // ✅ use PUT\n        headers: {\n          'Content-Type': 'application/json',\n          'auth-token': '<your-valid-token>'\n        },\n        body: JSON.stringify({\n          title,\n          description,\n          tag\n        })\n      });\n      const json = await response.json();\n      console.log(json);\n      const updatedNotes = notes.map(note => note._id === id ? {\n        ...note,\n        title,\n        description,\n        tag\n      } : note);\n      setnotes(updatedNotes);\n    } catch (error) {\n      console.error(\"Error editing note:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(noteContext.Provider, {\n    value: {\n      notes,\n      addNote,\n      deleteNote,\n      editNote,\n      getallNotes\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n};\n_s(NoteState, \"AoVBfJhv+WZzotSMTTreJsweXo4=\");\n_c = NoteState;\nexport default NoteState;\nvar _c;\n$RefreshReg$(_c, \"NoteState\");","map":{"version":3,"names":["useState","noteContext","jsxDEV","_jsxDEV","NoteState","props","_s","host","notesinitial","notes","setnotes","getallNotes","response","fetch","method","headers","json","console","log","error","addNote","title","description","tag","body","JSON","stringify","concat","deleteNote","id","newNotes","filter","note","_id","editNote","updatedNotes","map","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Ahmed/Desktop/Backend task/inotebook/src/Context/notes/NoteState.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport noteContext from \"./noteContext\";\r\n\r\nconst NoteState = (props) => {\r\n  const host = \"http://localhost:5000\";\r\n  const notesinitial = [];\r\n  const [notes, setnotes] = useState(notesinitial);\r\n\r\n  // Fetch all notes\r\n  const getallNotes = async () => {\r\n    try {\r\n      const response = await fetch(`${host}/api/notes/fetchallnotes`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'auth-token': '<your-valid-token>'\r\n        }\r\n      });\r\n\r\n      const json = await response.json();\r\n      setnotes(json); // optional, if your backend returns the array\r\n      console.log(json);\r\n    } catch (error) {\r\n      console.error(\"Error fetching notes:\", error);\r\n    }\r\n  };\r\n\r\n  // Add note\r\n  const addNote = async (title, description, tag) => {\r\n    try {\r\n      const response = await fetch(`${host}/api/notes/addnote`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'auth-token': '<your-valid-token>'\r\n        },\r\n        body: JSON.stringify({ title, description, tag })\r\n      });\r\n\r\n      const json = await response.json();\r\n      setnotes(notes.concat(json)); // use response from backend\r\n    } catch (error) {\r\n      console.error(\"Error adding note:\", error);\r\n    }\r\n  };\r\n\r\n  // Delete note\r\n  const deleteNote = async (id) => {\r\n    try {\r\n      const response = await fetch(`${host}/api/notes/deletenote/${id}`, {\r\n        method: 'DELETE',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'auth-token': '<your-valid-token>'\r\n        }\r\n      });\r\n\r\n      const json = await response.json();\r\n      console.log(json);\r\n\r\n      const newNotes = notes.filter((note) => note._id !== id);\r\n      setnotes(newNotes);\r\n    } catch (error) {\r\n      console.error(\"Error deleting note:\", error);\r\n    }\r\n  };\r\n\r\n  // Edit note\r\n  const editNote = async (id, title, description, tag) => {\r\n    try {\r\n      const response = await fetch(`${host}/api/notes/updatenote/${id}`, {\r\n        method: 'PUT', // ✅ use PUT\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'auth-token': '<your-valid-token>'\r\n        },\r\n        body: JSON.stringify({ title, description, tag })\r\n      });\r\n\r\n      const json = await response.json();\r\n      console.log(json);\r\n\r\n      const updatedNotes = notes.map((note) =>\r\n        note._id === id ? { ...note, title, description, tag } : note\r\n      );\r\n      setnotes(updatedNotes);\r\n    } catch (error) {\r\n      console.error(\"Error editing note:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <noteContext.Provider value={{ notes, addNote, deleteNote, editNote, getallNotes }}>\r\n      {props.children}\r\n    </noteContext.Provider>\r\n  );\r\n};\r\n\r\nexport default NoteState;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}