{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ahmed\\\\Desktop\\\\Backend task\\\\inotebook\\\\src\\\\Context\\\\notes\\\\NoteState.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport noteContext from \"./noteContext\";\nimport { toast } from \"react-toastify\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NoteState = props => {\n  _s();\n  const host = \"http://localhost:5000\";\n  const notesinitial = [];\n  const [notes, setnotes] = useState(notesinitial);\n\n  // fetch all notes\n  const getallNotes = async () => {\n    try {\n      const response = await fetch(`${host}/api/notes/fetchallnotes`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'auth-token': localStorage.getItem(\"token\")\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`Failed to fetch notes: ${response.statusText}`);\n      }\n      const data = await response.json();\n      setnotes(data);\n    } catch (error) {\n      toast.error(\"❌ Error fetching notes. Please try again later.\");\n      if (process.env.NODE_ENV === \"development\") {\n        console.error(\"Fetch Notes Error:\", error);\n      }\n    }\n  };\n\n  // add note\n  const addNote = async (title, description, tag) => {\n    try {\n      const response = await fetch(`${host}/api/notes/addnote`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'auth-token': localStorage.getItem('token')\n        },\n        body: JSON.stringify({\n          title,\n          description,\n          tag\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Failed to add note: ${response.statusText}`);\n      }\n      const note = await response.json();\n      setnotes(notes.concat(note));\n      toast.success(\"✅ Note added successfully!\");\n    } catch (error) {\n      toast.error(\"❌ Error adding note. Please try again.\");\n      if (process.env.NODE_ENV === \"development\") {\n        console.error(\"Add Note Error:\", error);\n      }\n    }\n  };\n\n  // delete note\n  const deleteNote = async id => {\n    try {\n      const response = await fetch(`${host}/api/notes/deletenote/${id}`, {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json',\n          'auth-token': localStorage.getItem('token')\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`Failed to delete note: ${response.statusText}`);\n      }\n      await response.json();\n      const newNotes = notes.filter(note => note._id !== id);\n      setnotes(newNotes);\n      toast.success(\"🗑️ Note deleted successfully!\");\n    } catch (error) {\n      toast.error(\"❌ Error deleting note. Please try again.\");\n      if (process.env.NODE_ENV === \"development\") {\n        console.error(\"Delete Note Error:\", error);\n      }\n    }\n  };\n\n  // edit note\n  const editNote = async (id, title, description, tag) => {\n    try {\n      const response = await fetch(`${host}/api/notes/updatenote/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'auth-token': localStorage.getItem('token')\n        },\n        body: JSON.stringify({\n          title,\n          description,\n          tag\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Failed to update note: ${response.statusText}`);\n      }\n      await response.json();\n      let newNotes = JSON.parse(JSON.stringify(notes));\n      for (let index = 0; index < newNotes.length; index++) {\n        const element = newNotes[index];\n        if (element._id === id) {\n          newNotes[index].title = title;\n          newNotes[index].description = description;\n          newNotes[index].tag = tag;\n          break;\n        }\n      }\n      setnotes(newNotes);\n      toast.success(\"✏️ Note updated successfully!\");\n    } catch (error) {\n      toast.error(\"❌ Error updating note. Please try again.\");\n      if (process.env.NODE_ENV === \"development\") {\n        console.error(\"Update Note Error:\", error);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(noteContext.Provider, {\n    value: {\n      notes,\n      addNote,\n      deleteNote,\n      editNote,\n      getallNotes\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 5\n  }, this);\n};\n_s(NoteState, \"AoVBfJhv+WZzotSMTTreJsweXo4=\");\n_c = NoteState;\nexport default NoteState;\nvar _c;\n$RefreshReg$(_c, \"NoteState\");","map":{"version":3,"names":["useState","noteContext","toast","jsxDEV","_jsxDEV","NoteState","props","_s","host","notesinitial","notes","setnotes","getallNotes","response","fetch","method","headers","localStorage","getItem","ok","Error","statusText","data","json","error","process","env","NODE_ENV","console","addNote","title","description","tag","body","JSON","stringify","note","concat","success","deleteNote","id","newNotes","filter","_id","editNote","parse","index","length","element","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Ahmed/Desktop/Backend task/inotebook/src/Context/notes/NoteState.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport noteContext from \"./noteContext\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst NoteState = (props) => {\r\n  const host = \"http://localhost:5000\";\r\n  const notesinitial = [];\r\n  const [notes, setnotes] = useState(notesinitial);\r\n\r\n  // fetch all notes\r\n  const getallNotes = async () => {\r\n    try {\r\n      const response = await fetch(`${host}/api/notes/fetchallnotes`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'auth-token': localStorage.getItem(\"token\")\r\n        }\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Failed to fetch notes: ${response.statusText}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      setnotes(data);\r\n    } catch (error) {\r\n      toast.error(\"❌ Error fetching notes. Please try again later.\");\r\n      if (process.env.NODE_ENV === \"development\") {\r\n        console.error(\"Fetch Notes Error:\", error);\r\n      }\r\n    }\r\n  };\r\n\r\n  // add note\r\n  const addNote = async (title, description, tag) => {\r\n    try {\r\n      const response = await fetch(`${host}/api/notes/addnote`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'auth-token': localStorage.getItem('token')\r\n        },\r\n        body: JSON.stringify({ title, description, tag })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Failed to add note: ${response.statusText}`);\r\n      }\r\n\r\n      const note = await response.json();\r\n      setnotes(notes.concat(note));\r\n      toast.success(\"✅ Note added successfully!\");\r\n    } catch (error) {\r\n      toast.error(\"❌ Error adding note. Please try again.\");\r\n      if (process.env.NODE_ENV === \"development\") {\r\n        console.error(\"Add Note Error:\", error);\r\n      }\r\n    }\r\n  };\r\n\r\n  // delete note\r\n  const deleteNote = async (id) => {\r\n    try {\r\n      const response = await fetch(`${host}/api/notes/deletenote/${id}`, {\r\n        method: 'DELETE',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'auth-token': localStorage.getItem('token')\r\n        }\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Failed to delete note: ${response.statusText}`);\r\n      }\r\n\r\n      await response.json();\r\n\r\n      const newNotes = notes.filter((note) => note._id !== id);\r\n      setnotes(newNotes);\r\n      toast.success(\"🗑️ Note deleted successfully!\");\r\n    } catch (error) {\r\n      toast.error(\"❌ Error deleting note. Please try again.\");\r\n      if (process.env.NODE_ENV === \"development\") {\r\n        console.error(\"Delete Note Error:\", error);\r\n      }\r\n    }\r\n  };\r\n\r\n  // edit note\r\n  const editNote = async (id, title, description, tag) => {\r\n    try {\r\n      const response = await fetch(`${host}/api/notes/updatenote/${id}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'auth-token': localStorage.getItem('token')\r\n        },\r\n        body: JSON.stringify({ title, description, tag })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Failed to update note: ${response.statusText}`);\r\n      }\r\n\r\n      await response.json();\r\n\r\n      let newNotes = JSON.parse(JSON.stringify(notes));\r\n      for (let index = 0; index < newNotes.length; index++) {\r\n        const element = newNotes[index];\r\n        if (element._id === id) {\r\n          newNotes[index].title = title;\r\n          newNotes[index].description = description;\r\n          newNotes[index].tag = tag;\r\n          break;\r\n        }\r\n      }\r\n      setnotes(newNotes);\r\n      toast.success(\"✏️ Note updated successfully!\");\r\n    } catch (error) {\r\n      toast.error(\"❌ Error updating note. Please try again.\");\r\n      if (process.env.NODE_ENV === \"development\") {\r\n        console.error(\"Update Note Error:\", error);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <noteContext.Provider value={{ notes, addNote, deleteNote, editNote, getallNotes }}>\r\n      {props.children}\r\n    </noteContext.Provider>\r\n  );\r\n};\r\n\r\nexport default NoteState;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}